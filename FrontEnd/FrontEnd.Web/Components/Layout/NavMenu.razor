@using System.Security.Claims
@using Identity.Public
@rendermode InteractiveServer

<div class="navmenu">
    <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />
    <label for="navmenu-toggle" class="navmenu-icon"><FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Fill" /></label>
    <nav class="site-nav" aria-labelledby="main-menu" onclick="document.getElementById('navmenu-toggle').click();">
        <div Style="text-align: center; margin: 20px 0">
            @if (_expanded)
            {
                <FluentAnchor
                    Href=@(_loggedIn ? "recipes/new" : "/log-in")
                    Appearance="Appearance.Accent"
                    IconEnd="@(new Icons.Regular.Size24.Add().WithColor(Color.Fill))">
                    Create
                </FluentAnchor>
            }
            else
            {
                <FluentAnchor
                    Href=@(_loggedIn ? "recipes/new" : "/log-in")
                    Appearance="Appearance.Accent"
                    IconEnd="@(new Icons.Regular.Size20.Add().WithColor(Color.Fill))"/>
            }
        </div>
        <FluentNavMenu Id="main-menu" Collapsible="true" Width="250" Title="Navigation menu" @bind-Expanded="_expanded">
            <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Filled.Size24.BookSearch())" IconColor="Color.Accent">Discover</FluentNavLink>
            @if (_isAdmin)
            {
                <FluentNavLink Href="/admin/tags" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size24.Tag())" IconColor="Color.Accent">Admin: Tags</FluentNavLink>
            }
        </FluentNavMenu>
    </nav>
</div>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    
    private bool _expanded = true;
    private bool _loggedIn = false;
    private bool _isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState.User;

            _loggedIn = user.Identity is not null && user.Identity.IsAuthenticated;
            _isAdmin = user.HasClaim(c => c is { Type: ClaimTypes.Role, Value: UserRoles.Admin });
        }
    }
}
