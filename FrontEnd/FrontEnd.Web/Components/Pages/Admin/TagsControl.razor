@page "/admin/tags"

@using FrontEnd.Web.Services
@using global::Recipes.Public
@using Identity.Public
@rendermode InteractiveServer
@inject IRecipeService RecipeService
@attribute [Authorize(Roles = UserRoles.Admin)]

<PageTitle>Tag Management</PageTitle>

<FluentLabel Typo="Typography.Header" MarginBlock="30px">Tag Management Panel</FluentLabel>

<FluentDataGrid Items="_tags" GenerateHeader="GenerateHeaderOption.Sticky" Loading="@(_tags == null)" Style="height: 405px;overflow:auto;">
    <PropertyColumn Title="Id" Property="@(t => t.Id)" />
    <PropertyColumn Title="Name" Property="@(t => t.Name)" />
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteTag(context.Id))" />
    </TemplateColumn>
</FluentDataGrid>
<FluentStack Orientation="Orientation.Horizontal" Style="margin-block: 20px;">
    <FluentTextField Placeholder="New tag" @bind-value="_newTagName" Required Style="width: 25ch;"/>
    <FluentButton Appearance="Appearance.Outline"
                  IconEnd="@(new Icons.Filled.Size16.AddCircle())"
                  OnClick="@(() => CreateTag(_newTagName))"/>
</FluentStack>

@code {
    private IQueryable<Tag>? _tags;
    private string? _newTagName;
    
    private async Task DeleteTag(int tagId)
    {
        if (await RecipeService.DeleteTagByIdAsync(tagId))
            await LoadTags();
    }
    
    private async Task CreateTag(string? tagName)
    {
        if (tagName == null) return;
        
        await RecipeService.CreateTagAsync(new TagCreateUpdateDTO { Name = tagName } );
        await LoadTags();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTags();
    }
    
    private async Task LoadTags()
    {
        var tags = (await RecipeService.GetAllTagsAsync()).Items;
        _tags = tags.AsQueryable();
    }
}