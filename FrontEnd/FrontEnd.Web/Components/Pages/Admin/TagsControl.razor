@page "/admin/tags"

@using FrontEnd.Web.Services
@using global::Recipes.Public
@using Identity.Public
@rendermode InteractiveServer
@inject IRecipeService RecipeService
@inject NavigationManager NavManager
@attribute [Authorize(Roles = UserRoles.Admin)]

<PageTitle>Tag Management</PageTitle>

<FluentLabel Typo="Typography.Header" Style="flex-grow: 1">Tag Management Panel</FluentLabel>

@if (_tags == null)
{
    <FluentProgressRing />
}
else
{
    <FluentDataGrid Loading="true" Items="_tags" GenerateHeader="GenerateHeaderOption.Sticky" >
        <PropertyColumn Title="Id" Property="@(t => t.Id)" />
        <PropertyColumn Title="Name" Property="@(t => t.Name)" />
        <TemplateColumn Title="Actions" Align="@Align.End">
            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteTag(context.Id))" />
        </TemplateColumn>
    </FluentDataGrid>
    <FluentStack Orientation="Orientation.Horizontal">
        <FluentTextField Placeholder="New tag" @bind-value="_newTagName" Required Style="width: 25ch;"/>
        <FluentButton Appearance="Appearance.Outline"
                      IconEnd="@(new Icons.Filled.Size16.AddCircle())"
                      OnClick="@(() => CreateTag(_newTagName))"/>
    </FluentStack>
}

@code {
    private IQueryable<Tag>? _tags;
    private string? _newTagName;
    
    private async Task DeleteTag(int tagId)
    {
        if (await RecipeService.DeleteTagByIdAsync(tagId))
            NavManager.Refresh();
    }
    
    private async Task CreateTag(string? tagName)
    {
        if (tagName == null) return;
        
        var newTag = await RecipeService.CreateTagAsync(new TagCreateUpdateDTO { Name = tagName } );
        _tags?.Append(newTag);
    }

    protected override async Task OnInitializedAsync()
    {
        _tags = (await RecipeService.GetAllTagsAsync()).Items.AsQueryable();
    }
}