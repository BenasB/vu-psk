@using System.ComponentModel.DataAnnotations
@using System.Data
@using FrontEnd.Web.Services
@rendermode InteractiveServer
@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager

<EditForm Model="@FormData" OnValidSubmit="@HandleValidSubmitAsync" FormName="recipe" novalidate>
    <ObjectGraphDataAnnotationsValidator/>

    <FluentGrid AdaptiveRendering>
        @if (_activeTab == "tab-current")
        {
        <FluentGridItem xs="12" sm="12" md="6">
            <FluentStack Orientation="Orientation.Vertical">
                <div style="width: 100%;">
                    <FluentTextField Name="title" @bind-Value="FormData.Title" Label="Title" Required style="width: 100%;" ReadOnly="ReadOnly"/>
                    <FluentValidationMessage For="@(() => FormData.Title)"/>
                </div>
                <FluentTextArea Name="description"
                                Rows="5"
                                @bind-Value="FormData.Description"
                                Label="Description"
                                ReadOnly="ReadOnly"
                                style="width: 100%;"/>
                <FluentAutocomplete TOption="global::Recipes.Public.Tag"
                                    AutoComplete="off"
                                    Label="Tags"
                                    Placeholder="Select tags"
                                    OnOptionsSearch="OnTagsSearchAsync"
                                    OptionText="@(tag => tag.Name)"
                                    @bind-SelectedOptions="@FormData.Tags"
                                    Disabled="ReadOnly"
                                    Width="100%"/>
                <div style="width: 100%;">
                    <FluentNumberField Name="cookingTime"
                                       @bind-Value="FormData.CookingTimeInMinutes"
                                       ParsingErrorMessage="Cooking time must be an integer"
                                       Label="Cooking time (min.)"
                                       Required
                                       ReadOnly="ReadOnly"
                                       style="width: 100%;"/>
                    <FluentValidationMessage For="@(() => FormData.CookingTimeInMinutes)" />
                </div>
                <div style="width: 100%;">
                    <FluentNumberField Name="servings"
                                       @bind-Value="FormData.Servings"
                                       Label="Servings"
                                       Required
                                       ReadOnly="ReadOnly"
                                       style="width: 100%;"/>
                    <FluentValidationMessage For="@(() => FormData.Servings)"/>
                </div>
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentLabel>Ingredients <span style="color: red;">*</span></FluentLabel>
                    <FluentValidationMessage For="@(() => FormData.Ingredients)"/>
                    @foreach (var ingredient in FormData.Ingredients)
                    {
                        <div style="width: 100%;">
                            <FluentStack Orientation="Orientation.Horizontal">
                                <FluentTextField @bind-Value="ingredient.Value" ReadOnly="ReadOnly" Style="width: 100%"/>
                                <FluentButton Appearance="Appearance.Lightweight"
                                              IconEnd="@(new Icons.Regular.Size16.Delete())"
                                              OnClick="@(() => FormData.Ingredients.Remove(ingredient))"
                                              Disabled="ReadOnly"/>
                            </FluentStack>
                            <FluentValidationMessage For="@(() => ingredient.Value)"/>
                        </div>
                    }
                    <FluentButton Appearance="Appearance.Lightweight"
                                  OnClick="() => FormData.Ingredients.Add(new Ingredient())"
                                  Disabled="ReadOnly">
                        Add new ingredient
                    </FluentButton>
                </FluentStack>
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentLabel>Instructions <span style="color: red;">*</span></FluentLabel>
                    <FluentValidationMessage For="@(() => FormData.Instructions)"/>
                    @for (var i = 0; i < FormData.Instructions.Count; i++)
                    {
                        <div style="width: 100%;">
                            @{
                                var index = i;
                                var instruction = FormData.Instructions[i];
                            }
                            <FluentStack Orientation="Orientation.Horizontal">
                                <FluentLabel>@(index + 1).</FluentLabel>
                                <FluentTextArea Rows="5" @bind-Value="instruction.Value" Style="width: 100%" ReadOnly="ReadOnly"/>
                                <FluentButton Appearance="Appearance.Lightweight"
                                              IconEnd="@(new Icons.Regular.Size16.Delete())"
                                              OnClick="@(() => FormData.Instructions.Remove(instruction))"
                                              Disabled="ReadOnly"/>
                            </FluentStack>
                            <FluentValidationMessage For="@(() => instruction.Value)"/>
                        </div>
                    }
                    <FluentButton Appearance="Appearance.Lightweight"
                                  OnClick="() => FormData.Instructions.Add(new InstructionStep())"
                                  Disabled="ReadOnly">
                        Add new step
                    </FluentButton>
                </FluentStack>
            </FluentStack>
        </FluentGridItem>
        <FluentGridItem xs="12" sm="12" md="6">
            <FluentStack Orientation="Orientation.Vertical">
                <FluentStack Orientation="Orientation.Horizontal">
                    <FluentLabel>Picture</FluentLabel>
                    @if (FormData.Image != null)
                    {
                        <FluentSpacer/>
                        <FluentButton Appearance="Appearance.Lightweight"
                                      IconEnd="@(new Icons.Regular.Size16.Delete())"
                                      OnClick="@(() => FormData.Image = null)"
                                      Disabled="ReadOnly"/>
                    }
                </FluentStack>
                @if (FormData.Image != null)
                {
                    <img src="@FormData.Image" alt="Input image" style="width: 100%"/>
                }
                else
                {
                    <!--suppress CssUnresolvedCustomProperty -->
                    <FluentInputFile Id="picture"
                                     @ref="@_imageFile"
                                     Mode="InputFileMode.Stream"
                                     OnFileUploaded="OnFileUploadedAsync"
                                     Accept="image/*"
                                     Disabled="ReadOnly"
                                     Style="height: 300px; width: 100%; border: 1px dashed var(--accent-fill-rest);">
                        <ChildContent>
                            <label for="picture">
                                <FluentIcon Value="@(new @Icons.Regular.Size24.ArrowUpload())"/>
                            </label>

                            <div>
                                Drag files here you wish to upload, or <label for="picture">browse</label> for them.
                            </div>
                        </ChildContent>
                    </FluentInputFile>
                }
            </FluentStack>
        </FluentGridItem>
        }
        else
        {
            <Form InitialData="_conflictedRecipe" ReadOnly="true"></Form>
        }
        <FluentGridItem xs="12">
            @if (!ReadOnly)
            {
                @if (_conflictedRecipe != null)
                {
                    <FluentMessageBar Intent="@MessageIntent.Warning" AllowDismiss="false">
                        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" Wrap="true">
                            <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">This recipe was edited by another user</FluentLabel>
                            <FluentSpacer/>
                            <FluentTabs Orientation="Orientation.Horizontal" @bind-ActiveTabId="@_activeTab" Width="150px">
                                <FluentTab Label="Current" Id="tab-current"/>
                                <FluentTab Label="Latest" Id="tab-latest"/>
                            </FluentTabs>
                            <FluentButton OnClick="() => NavigationManager.Refresh(forceReload: true)">Edit latest</FluentButton>
                            <FluentButton Appearance="Appearance.Accent"
                                          BackgroundColor="var(--error)"
                                          Type="ButtonType.Submit">
                                Force overwrite
                            </FluentButton>
                        </FluentStack>
                    </FluentMessageBar>
                }
                else
                {
                    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">@(InitialData == null ? "Create" : "Edit")</FluentButton>
                }
            }
        </FluentGridItem>
    </FluentGrid>
</EditForm>

@code{
    [Parameter] public global::Recipes.Public.Recipe? InitialData { get; set; }
    [Parameter] public bool ReadOnly { get; set; } = false;

    [SupplyParameterFromForm] private RecipeFormData FormData { get; set; } = new();

    private FluentInputFile? _imageFile;
    private List<global::Recipes.Public.Tag> _availableTags = [];
    private global::Recipes.Public.Recipe? _conflictedRecipe;
    private string? _activeTab = "tab-current";

    protected override async Task OnInitializedAsync()
    {
        if (InitialData != null)
        {
            FormData = new RecipeFormData
            {
                Title = InitialData.Title,
                Description = InitialData.Description,
                Servings = InitialData.Servings,
                CookingTimeInMinutes = (int)InitialData.CookingTime.TotalMinutes,
                Tags = InitialData.Tags,
                Ingredients = InitialData.Ingredients.Select(x => new Ingredient { Value = x }).ToList(),
                Instructions = InitialData.Instructions.Select(x => new InstructionStep { Value = x }).ToList(),
                Image = InitialData.Image
            };
        }

        _availableTags = (await RecipeService.GetAllTagsAsync()).Items.ToList();
    }

    private class RecipeFormData
    {
        [Required, MinLength(3, ErrorMessage = "Title is too short!")]
        public string? Title { get; set; }

        public string? Description { get; set; }

        [Required(ErrorMessage = "The cooking time field is required.")]
        [Range(1, 24 * 60, ErrorMessage = "The cooking time must be between 1 minute and 1 day")]
        public int? CookingTimeInMinutes { get; set; }

        [Required, Range(1, 24)] public int? Servings { get; set; } = 1;

        [ValidateComplexType, MinLength(1, ErrorMessage = "At least one ingredient must be present")]
        public List<Ingredient> Ingredients { get; set; } = [];

        [ValidateComplexType, MinLength(1, ErrorMessage = "At least one instruction must be present")]
        public List<InstructionStep> Instructions { get; set; } = [];

        public IEnumerable<global::Recipes.Public.Tag> Tags { get; set; } = [];

        public string? Image { get; set; }
    }

    private class Ingredient
    {
        [Required(ErrorMessage = "Ingredient must have a value")]
        public string? Value { get; set; }
    }

    private class InstructionStep
    {
        [Required(ErrorMessage = "Instruction step must have a value")]
        public string? Value { get; set; }
    }

    private async Task HandleValidSubmitAsync()
    {
        if (InitialData == null)
        {
            // Creation
            var requestDto = new global::Recipes.Public.RecipeCreateDTO
            {
                Title = FormData.Title!,
                Description = FormData.Description,
                CookingTime = TimeSpan.FromMinutes((double)FormData.CookingTimeInMinutes!),
                Servings = FormData.Servings!.Value,
                Ingredients = FormData.Ingredients.Select(x => x.Value!).ToList(),
                Instructions = FormData.Instructions.Select(x => x.Value!).ToList(),
                Tags = FormData.Tags.Select(x => x.Name).ToList(),
                Image = FormData.Image
            };

            var result = await RecipeService.CreateAsync(requestDto);
            NavigationManager.NavigateTo($"recipes/{result.Id}");
        }
        else
        {
            // Update
            var requestDto = new global::Recipes.Public.RecipeUpdateDTO
            {
                Title = FormData.Title!,
                Description = FormData.Description,
                CookingTime = TimeSpan.FromMinutes((double)FormData.CookingTimeInMinutes!),
                Servings = FormData.Servings!.Value,
                Ingredients = FormData.Ingredients.Select(x => x.Value!).ToList(),
                Instructions = FormData.Instructions.Select(x => x.Value!).ToList(),
                Tags = FormData.Tags.Select(x => x.Name).ToList(),
                Image = FormData.Image,
                Version = _conflictedRecipe?.Version ?? InitialData.Version
            };

            try
            {
                await RecipeService.UpdateAsync(InitialData.Id, requestDto);
                NavigationManager.NavigateTo($"recipes/{InitialData.Id}");
            }
            catch (DBConcurrencyException)
            {
                _conflictedRecipe = await RecipeService.GetByIdAsync(InitialData.Id);
            }
        }
    }

    private Task OnTagsSearchAsync(OptionsSearchEventArgs<global::Recipes.Public.Tag> e)
    {
        if (string.IsNullOrWhiteSpace(e.Text))
        {
            e.Items = _availableTags;
            return Task.CompletedTask;
        }

        e.Items = _availableTags.Where(tag => tag.Name.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase));
        return Task.CompletedTask;
    }

    private async Task OnFileUploadedAsync(FluentInputFileEventArgs file)
    {
        // Load everything in memory, since we'll be sending the image in base64 anyway
        var memoryStream = new MemoryStream();
        await file.Stream!.CopyToAsync(memoryStream);

        FormData.Image = "data:" + file.ContentType + ";base64," + Convert.ToBase64String(memoryStream.ToArray());
    }
}