@page "/recipes/{Id:int}"

@using System.Security.Claims
@using FrontEnd.Web.Services
@using Identity.Public
@rendermode InteractiveServer
@inject IRecipeService RecipeService
@inject NavigationManager NavManager
@inject IIdentityService IdentityService

<PageTitle>@(_recipe?.Title ?? "Single recipe display")</PageTitle>

@if (_recipeTask is not { IsCompleted: true })
{
    <FluentSkeleton Height="14rem" Width="100%" Style="margin-bottom: 10px;" />
    <FluentSkeleton Height="2.5em" Width="100%" Style="margin-bottom: 10px;" />
    <FluentStack Orientation="Orientation.Vertical">
        <FluentStack>
            <FluentSkeleton Height="20px" Width="50px" />
            <FluentSkeleton Height="20px" Width="50px" />
        </FluentStack>
        <FluentSkeleton Height="0.875em" Width="100%" />
        <FluentSkeleton Height="0.875em" Width="100%" />
        <FluentSkeleton Height="0.875em" Width="50%" />
        <FluentSkeleton Height="1.5em" Width="150px" Style="margin-top: 10px;" />
        <FluentSkeleton Height="2em" Width="100%" />
        <FluentSkeleton Height="2em" Width="100%" />
    </FluentStack>
}
else if (_recipe == null)
{
    <FluentLabel Typo="Typography.H1" MarginBlock="10px">Recipe not found.</FluentLabel>
    <FluentLabel Typo="Typography.Body" MarginBlock="10px">The requested recipe doesn't exist.</FluentLabel>
}
else
{
    @if (_recipe.Image != null)
    {
        <img src="@_recipe.Image" alt="@_recipe.Title" style="object-fit: cover; height: 14rem; width: 100%" />
    }
    <FluentStack Style="margin-block: 10px;">
        <FluentLabel Typo="Typography.H1" Style="flex-grow: 1">@_recipe.Title</FluentLabel>
        <FluentStack Width="auto">
            <FluentButton Appearance="Appearance.Outline" IconStart="@(new Icons.Regular.Size20.Share())" Id="share-menu-button" @onclick="@(() => ShareMenuOpen = !ShareMenuOpen)">
                Share
            </FluentButton>
            @if (_isAuthor)
            {
                <FluentAnchor Href=@($"/recipes/{Id}/edit") Appearance="Appearance.Accent">Edit</FluentAnchor>
                <FluentButton OnClick="@DeleteRecipe" Appearance="Appearance.Accent">Delete</FluentButton>
            }
        </FluentStack>
    </FluentStack>
    <FluentGrid AdaptiveRendering>
        <FluentGridItem sm="12" md="6">
            <FluentStack Orientation="Orientation.Vertical" Style="min-width: 500px;">
                <FluentOverflow Style="width: 100%;">
                    <FluentOverflowItem>
                        <FluentBadge Appearance="Appearance.Accent">
                            <FluentIcon Color="Color.Disabled" Value=@(new Icons.Regular.Size16.Timer())/>@_recipe.CookingTime
                        </FluentBadge>
                    </FluentOverflowItem>
                    <FluentOverflowItem>
                        <FluentBadge Appearance="Appearance.Accent">
                            <FluentIcon Color="Color.Disabled" Value=@(new Icons.Regular.Size16.PersonBoard())/>@_recipe.Servings
                        </FluentBadge>
                    </FluentOverflowItem>
                    @foreach (var item in _recipe.Tags)
                    {
                        <FluentOverflowItem>
                            <FluentBadge Appearance="Appearance.Accent">@item.Name</FluentBadge>
                        </FluentOverflowItem>
                    }
                </FluentOverflow>
                @if (_author != null)
                {
                    <FluentAnchor Href=@($"/users/{_author.Id}") Appearance="Appearance.Stealth" Style="height: 45px">
                        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                                <FluentLabel Typo="Typography.Body">By </FluentLabel>
                                <FluentPersona Name="@_author.Username"
                                               Image="@_author.ImageUrl"
                                               ImageSize="35px">
                                </FluentPersona>
                        </FluentStack>
                    </FluentAnchor>
                }
                <p>@_recipe.Description</p>
                <FluentLabel Color="Color.Accent" Typo="Typography.H4">Ingredients</FluentLabel>
                <FluentDataGrid Items=_recipe.Ingredients.AsQueryable() Style="width: 100%;" ShowHover GenerateHeader="GenerateHeaderOption.None">
                    <PropertyColumn Property="@(ingredient => ingredient)"/>
                </FluentDataGrid>
            </FluentStack>
        </FluentGridItem>
        <FluentGridItem sm="12" md="6">
            <FluentLabel Color="Color.Accent" Typo="Typography.H4">Instructions</FluentLabel>
            <ol>
                @foreach (var instruction in _recipe.Instructions)
                {
                    <li style="margin-block: 10px;">@instruction</li>
                }
            </ol>
        </FluentGridItem>
    </FluentGrid>
    
    <FluentMenu Anchor="share-menu-button" @bind-Open="ShareMenuOpen" VerticalThreshold="170">
        <FluentStack Orientation="Orientation.Vertical" Style="align-items: unset;">
            <FluentAnchor role="menuitem" Appearance="Appearance.Stealth" Href=@($"https://www.facebook.com/sharer/sharer.php?u={NavManager.Uri}") Target="_blank">
                Facebook
            </FluentAnchor>
            <FluentAnchor role="menuitem" Appearance="Appearance.Stealth" Href=@($"https://twitter.com/intent/tweet?url={Uri.EscapeDataString(NavManager.Uri)}&text={Uri.EscapeDataString(_recipe.Title)}") Target="_blank">
                Twitter
            </FluentAnchor>
            <FluentAnchor role="menuitem" Appearance="Appearance.Stealth" Href=@($"https://reddit.com/submit?url={NavManager.Uri}&title={_recipe.Title}") Target="_blank">
                Reddit
            </FluentAnchor>
        </FluentStack>
    </FluentMenu>
}

@code {
    [Parameter]
    public int Id { get; set; }
    
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    
    private bool ShareMenuOpen { get; set; } = false;

    private global::Recipes.Public.Recipe? _recipe;
    private User? _author;
    private Task<global::Recipes.Public.Recipe?>? _recipeTask;
    private bool _isAuthor;
    
    private async Task DeleteRecipe()
    {
        if (_recipe != null && await RecipeService.DeleteByIdAsync(_recipe.Id))
            NavManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        _recipeTask = RecipeService.GetByIdAsync(Id);
        _recipe = await _recipeTask;

        if (_recipe is null)
            return;
        
        _author = await IdentityService.GetByIdAsync(_recipe.AuthorId);

        if (AuthenticationState == null)
            return;
        
        var authState = await AuthenticationState;
        var user = authState.User;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var userId = int.Parse(user.FindFirstValue(ClaimTypes.NameIdentifier)!);
            _isAuthor = _recipe.AuthorId == userId || user.IsInRole(UserRoles.Admin);
        }
    }
}
