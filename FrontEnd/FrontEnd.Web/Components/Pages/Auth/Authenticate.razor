@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@implements IDialogContentComponent<Authenticate.CredentialsFormData>
@rendermode InteractiveServer

<FluentDialogHeader>
    <FluentLabel Typo="Typography.PaneHeader">@(IsSignUp ? "Sign up" : "Log in")</FluentLabel>
</FluentDialogHeader>
<FluentDialogBody>
    <EditForm EditContext="_editContext" FormName="auth" novalidate>
        <ObjectGraphDataAnnotationsValidator/>

        <FluentStack Orientation="Orientation.Vertical" VerticalGap="20" Style="margin-block: 20px;">
            <FluentTextField Placeholder="Username" @bind-Value="Content.Username" Required Style="width: 40ch;"/>
            <FluentTextField Placeholder="Password" @bind-Value="Content.Password" TextFieldType="TextFieldType.Password" Required Style="width: 40ch;"/>
            <FluentLabel Typo="Typography.Body" Style="display: inline-flex; align-items: center; gap: 10px;">
                @{
                    if (IsSignUp)
                    {
                        <text>Already have an account? </text>
                        <FluentButton Appearance="Appearance.Lightweight" OnClick="@(() => IsSignUp = false)">Log in!</FluentButton>
                    }
                    else
                    {
                        <text>New to our platform? </text>
                        <FluentButton Appearance="Appearance.Lightweight" OnClick="@(() => IsSignUp = true)">Sign up!</FluentButton>
                    }
                }
            </FluentLabel>
        </FluentStack>
    </EditForm>
</FluentDialogBody>
<FluentDialogFooter Style="justify-content: center;">
    <FluentButton Disabled="@(!_editContext.Validate())" OnClick="@LoginAsync" Appearance="Appearance.Accent">@(IsSignUp ? "Sign up" : "Log in")</FluentButton>
</FluentDialogFooter>

@code {
    private EditContext _editContext = default!;
    private bool IsSignUp { get; set; }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    
    [Parameter]
    public CredentialsFormData Content { get; set; } = default!;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Content);
    }
    
    private async Task LoginAsync()
    {
        await Dialog.CloseAsync(Content);
    }
    
    public record CredentialsFormData
    {
        [Required]
        [DisplayName("User name"), Description("Login name")]
        public string Username { get; set; } = string.Empty;

        [Required, PasswordPropertyText(true), MinLength(8, ErrorMessage = "Password is too short (min. 8 characters)")]
        [DisplayName("Password"), Description("Login password")]
        public string Password { get; set; } = string.Empty;
    }
}