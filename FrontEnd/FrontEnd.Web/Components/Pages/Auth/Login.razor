@page "/log-in"
@rendermode InteractiveServer
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using BitzArt.Blazor.Auth
@using Identity.Public
@inject IUserService UserService
@inject NavigationManager NavigationManager

<PageTitle>Log In</PageTitle>

<FluentGrid AdaptiveRendering="true" Justify="JustifyContent.Center" Style="margin-block: 20px; margin-inline: 20px;">
    <FluentGridItem md="6" HiddenWhen="GridItemHidden.SmAndDown" Style="overflow: hidden; height: 80vh">
        <img src="https://cdn.pixabay.com/photo/2024/02/23/22/51/ai-generated-8592930_1280.jpg" alt="Login page image" style="transform: translate(0, -30%)"/>
    </FluentGridItem>
    <FluentGridItem md="6">
        <FluentStack Orientation="Orientation.Vertical" Style="display: flex; align-items: center; margin-top: 15vh; ">
            <FluentLabel Typo="Typography.PaneHeader">Log In</FluentLabel>
            <EditForm Model="@Credentials" OnValidSubmit="@LoginAsync" FormName="login" novalidate>
                <ObjectGraphDataAnnotationsValidator/>

                <FluentStack Orientation="Orientation.Vertical" VerticalGap="20" Style="margin-block: 20px;">
                    <div>
                        <FluentTextField Placeholder="Username" @bind-Value="Credentials.Username" Required Style="width: 40ch;"/>
                        <FluentValidationMessage For="@(() => Credentials.Username)"/>
                    </div>
                    <div>
                        <FluentTextField Placeholder="Password" @bind-Value="Credentials.Password" TextFieldType="TextFieldType.Password" Required Style="width: 40ch;"/>
                        <FluentValidationMessage For="@(() => Credentials.Password)"/>
                    </div>
                    
                    <FluentLabel Typo="Typography.Body" Style="display: inline-flex; align-items: center; gap: 10px;">
                        <text>New to our platform? </text>
                        <FluentAnchor Appearance="Appearance.Lightweight" Href="/sign-up">Sign up!</FluentAnchor>
                    </FluentLabel>
                </FluentStack>
            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Log In</FluentButton>
            </EditForm>
        </FluentStack>
    </FluentGridItem>
</FluentGrid>

@code {
    [SupplyParameterFromForm] private LoginCredentialsFormData Credentials { get; set; } = new();

    private async Task LoginAsync()
    {
        var loginRequest = new UserLoginRequest
        {
            Username = Credentials.Username,
            Password = Credentials.Password
        };
        
        await UserService.SignInAsync(loginRequest);
        NavigationManager.NavigateTo("/", true); // TODO: Consider having returnUrl
    }
    
    public record LoginCredentialsFormData
    {
        [Required]
        [DisplayName("User name"), Description("Login name")]
        public string Username { get; set; } = string.Empty;

        [Required, PasswordPropertyText(true), MinLength(8, ErrorMessage = "The password must contain at least 8 characters.")]
        [DisplayName("Password"), Description("Login password")]
        public string Password { get; set; } = string.Empty;
    }
}